// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharingMezzi.Infrastructure.Database;

#nullable disable

namespace SharingMezzi.Infrastructure.Migrations
{
    [DbContext(typeof(SharingMezziContext))]
    [Migration("20250616140737_AddSegnalazioneManutenzione")]
    partial class AddSegnalazioneManutenzione
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("SharingMezzi.Core.Entities.AttuatoreSblocco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Stato")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UltimaAttivazione")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AttuatoriSblocco");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Corsa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CostoTotale")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DurataMinuti")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Fine")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Inizio")
                        .HasColumnType("TEXT");

                    b.Property<int>("MezzoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParcheggioDestinazioneId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParcheggioPartenzaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PuntiEcoAssegnati")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stato")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UtenteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MezzoId");

                    b.HasIndex("ParcheggioDestinazioneId");

                    b.HasIndex("ParcheggioPartenzaId");

                    b.HasIndex("UtenteId");

                    b.ToTable("Corse");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Mezzo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsElettrico")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LivelloBatteria")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Modello")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParcheggioId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SlotId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SlotId2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stato")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TariffaFissa")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TariffaPerMinuto")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UltimaManutenzione")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParcheggioId");

                    b.HasIndex("SlotId2");

                    b.ToTable("Mezzi");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CorsaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importo")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("Metodo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stato")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UtenteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CorsaId")
                        .IsUnique();

                    b.HasIndex("UtenteId");

                    b.ToTable("Pagamenti");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Parcheggio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capienza")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Indirizzo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PostiLiberi")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostiOccupati")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Parcheggi");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Ricarica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataRicarica")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Importo")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("MetodoPagamento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SaldoFinale")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SaldoPrecedente")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("Stato")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransactionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UtenteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UtenteId");

                    b.ToTable("Ricariche");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.SegnalazioneManutenzione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CorsaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataRisoluzione")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataSegnalazione")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("MezzoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NoteRisoluzione")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priorita")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stato")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TecnicoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UtenteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CorsaId");

                    b.HasIndex("MezzoId");

                    b.HasIndex("TecnicoId");

                    b.HasIndex("UtenteId");

                    b.ToTable("SegnalazioniManutenzione");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.SensoreBatteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAttivo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LivelloBatteria")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MezzoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MezzoId");

                    b.ToTable("SensoriBatteria");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AttuatoreSbloccoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataUltimoAggiornamento")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MezzoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParcheggioId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stato")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AttuatoreSbloccoId")
                        .IsUnique();

                    b.HasIndex("MezzoId")
                        .IsUnique();

                    b.HasIndex("ParcheggioId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Utente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Credito")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("CreditoMinimo")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasDefaultValue(5.00m);

                    b.Property<DateTime>("DataRegistrazione")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DataSospensione")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MotivoSospensione")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PuntiEco")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Ruolo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stato")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telefono")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Utenti");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Corsa", b =>
                {
                    b.HasOne("SharingMezzi.Core.Entities.Mezzo", "Mezzo")
                        .WithMany("Corse")
                        .HasForeignKey("MezzoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharingMezzi.Core.Entities.Parcheggio", "ParcheggioDestinazione")
                        .WithMany("CorseDestinazione")
                        .HasForeignKey("ParcheggioDestinazioneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SharingMezzi.Core.Entities.Parcheggio", "ParcheggioPartenza")
                        .WithMany("CorsePartenza")
                        .HasForeignKey("ParcheggioPartenzaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharingMezzi.Core.Entities.Utente", "Utente")
                        .WithMany("Corse")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mezzo");

                    b.Navigation("ParcheggioDestinazione");

                    b.Navigation("ParcheggioPartenza");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Mezzo", b =>
                {
                    b.HasOne("SharingMezzi.Core.Entities.Parcheggio", "Parcheggio")
                        .WithMany("Mezzi")
                        .HasForeignKey("ParcheggioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SharingMezzi.Core.Entities.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId2");

                    b.Navigation("Parcheggio");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Pagamento", b =>
                {
                    b.HasOne("SharingMezzi.Core.Entities.Corsa", "Corsa")
                        .WithOne("Pagamento")
                        .HasForeignKey("SharingMezzi.Core.Entities.Pagamento", "CorsaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SharingMezzi.Core.Entities.Utente", "Utente")
                        .WithMany("Pagamenti")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corsa");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Ricarica", b =>
                {
                    b.HasOne("SharingMezzi.Core.Entities.Utente", "Utente")
                        .WithMany("Ricariche")
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.SegnalazioneManutenzione", b =>
                {
                    b.HasOne("SharingMezzi.Core.Entities.Corsa", "Corsa")
                        .WithMany()
                        .HasForeignKey("CorsaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SharingMezzi.Core.Entities.Mezzo", "Mezzo")
                        .WithMany()
                        .HasForeignKey("MezzoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharingMezzi.Core.Entities.Utente", "Tecnico")
                        .WithMany()
                        .HasForeignKey("TecnicoId");

                    b.HasOne("SharingMezzi.Core.Entities.Utente", "Utente")
                        .WithMany()
                        .HasForeignKey("UtenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corsa");

                    b.Navigation("Mezzo");

                    b.Navigation("Tecnico");

                    b.Navigation("Utente");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.SensoreBatteria", b =>
                {
                    b.HasOne("SharingMezzi.Core.Entities.Mezzo", "Mezzo")
                        .WithMany("SensoriBatteria")
                        .HasForeignKey("MezzoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mezzo");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Slot", b =>
                {
                    b.HasOne("SharingMezzi.Core.Entities.AttuatoreSblocco", "AttuatoreSblocco")
                        .WithOne("Slot")
                        .HasForeignKey("SharingMezzi.Core.Entities.Slot", "AttuatoreSbloccoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SharingMezzi.Core.Entities.Mezzo", "Mezzo")
                        .WithOne()
                        .HasForeignKey("SharingMezzi.Core.Entities.Slot", "MezzoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SharingMezzi.Core.Entities.Parcheggio", "Parcheggio")
                        .WithMany("Slots")
                        .HasForeignKey("ParcheggioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttuatoreSblocco");

                    b.Navigation("Mezzo");

                    b.Navigation("Parcheggio");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.AttuatoreSblocco", b =>
                {
                    b.Navigation("Slot");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Corsa", b =>
                {
                    b.Navigation("Pagamento");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Mezzo", b =>
                {
                    b.Navigation("Corse");

                    b.Navigation("SensoriBatteria");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Parcheggio", b =>
                {
                    b.Navigation("CorseDestinazione");

                    b.Navigation("CorsePartenza");

                    b.Navigation("Mezzi");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("SharingMezzi.Core.Entities.Utente", b =>
                {
                    b.Navigation("Corse");

                    b.Navigation("Pagamenti");

                    b.Navigation("Ricariche");
                });
#pragma warning restore 612, 618
        }
    }
}
